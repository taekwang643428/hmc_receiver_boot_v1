
hmc_receiver_boot_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08004564  08004564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  00006030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004758  08004758  00006030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800475c  0800475c  0000575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08004760  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006030  2**0
                  CONTENTS
 10 .bss          00000144  20000030  20000030  00006030  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20000174  20000174  00006030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a815  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023bd  00000000  00000000  00010875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  00012c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000734  00000000  00000000  000135c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002044b  00000000  00000000  00013cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c599  00000000  00000000  00034147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0c02  00000000  00000000  000406e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001012e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000249c  00000000  00000000  00101328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a6  00000000  00000000  001037c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800454c 	.word	0x0800454c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	0800454c 	.word	0x0800454c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 80004f8:	f001 fbd8 	bl	8001cac <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 80004fc:	4b02      	ldr	r3, [pc, #8]	@ (8000508 <FLASH_If_Init+0x14>)
 80004fe:	22f3      	movs	r2, #243	@ 0xf3
 8000500:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 8000514:	f7ff ffee 	bl	80004f4 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 8000518:	480e      	ldr	r0, [pc, #56]	@ (8000554 <FLASH_If_Erase+0x48>)
 800051a:	f000 f87b 	bl	8000614 <GetSector>
 800051e:	6278      	str	r0, [r7, #36]	@ 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 8000524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000526:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8000528:	230a      	movs	r3, #10
 800052a:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 800052c:	2302      	movs	r3, #2
 800052e:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8000530:	f107 0220 	add.w	r2, r7, #32
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4611      	mov	r1, r2
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fd18 	bl	8001f70 <HAL_FLASHEx_Erase>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <FLASH_If_Erase+0x40>
  }
  
  return (0);
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3728      	adds	r7, #40	@ 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	08004000 	.word	0x08004000

08000558 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e024      	b.n	80005b8 <FLASH_If_Write+0x60>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	4413      	add	r3, r2
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2200      	movs	r2, #0
 800057a:	461c      	mov	r4, r3
 800057c:	4615      	mov	r5, r2
 800057e:	4622      	mov	r2, r4
 8000580:	462b      	mov	r3, r5
 8000582:	68f9      	ldr	r1, [r7, #12]
 8000584:	2002      	movs	r0, #2
 8000586:	f001 fb3f 	bl	8001c08 <HAL_FLASH_Program>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d10e      	bne.n	80005ae <FLASH_If_Write+0x56>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	68b9      	ldr	r1, [r7, #8]
 800059a:	440b      	add	r3, r1
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d001      	beq.n	80005a6 <FLASH_If_Write+0x4e>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 80005a2:	2302      	movs	r3, #2
 80005a4:	e011      	b.n	80005ca <FLASH_If_Write+0x72>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3304      	adds	r3, #4
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	e001      	b.n	80005b2 <FLASH_If_Write+0x5a>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 80005ae:	2303      	movs	r3, #3
 80005b0:	e00b      	b.n	80005ca <FLASH_If_Write+0x72>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	3301      	adds	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d203      	bcs.n	80005c8 <FLASH_If_Write+0x70>
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <FLASH_If_Write+0x7c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d9d2      	bls.n	800056e <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdb0      	pop	{r4, r5, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	081ffffb 	.word	0x081ffffb

080005d8 <FLASH_If_GetWriteProtectionStatus>:
  * @param  None
  * @retval 0: No write protected sectors inside the user flash area
  *         1: Some sectors inside the user flash area are write protected
  */
uint16_t FLASH_If_GetWriteProtectionStatus(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  uint32_t ProtectedSECTOR = 0xFFF;
 80005de:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005e2:	61fb      	str	r3, [r7, #28]
  FLASH_OBProgramInitTypeDef OptionsBytesStruct;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80005e4:	f001 fb62 	bl	8001cac <HAL_FLASH_Unlock>

  /* Check if there are write protected sectors inside the user flash area ****/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 80005e8:	463b      	mov	r3, r7
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fd2e 	bl	800204c <HAL_FLASHEx_OBGetConfig>

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80005f0:	f001 fb7e 	bl	8001cf0 <HAL_FLASH_Lock>

  /* Get pages already write protected ****************************************/
  ProtectedSECTOR = ~(OptionsBytesStruct.WRPSector) & FLASH_SECTOR_TO_BE_PROTECTED;
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	43db      	mvns	r3, r3
 80005f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005fc:	61fb      	str	r3, [r7, #28]

  /* Check if desired pages are already write protected ***********************/
  if(ProtectedSECTOR != 0)
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <FLASH_If_GetWriteProtectionStatus+0x30>
  {
    /* Some sectors inside the user flash area are write protected */
    return FLASHIF_PROTECTION_WRPENABLED;
 8000604:	2302      	movs	r3, #2
 8000606:	e000      	b.n	800060a <FLASH_If_GetWriteProtectionStatus+0x32>
  }
  else
  { 
    /* No write protected sectors inside the user flash area */
    return FLASHIF_PROTECTION_NONE;
 8000608:	2300      	movs	r3, #0
  }
}
 800060a:	4618      	mov	r0, r3
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a3b      	ldr	r2, [pc, #236]	@ (8000710 <GetSector+0xfc>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d206      	bcs.n	8000636 <GetSector+0x22>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800062e:	d302      	bcc.n	8000636 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e064      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a36      	ldr	r2, [pc, #216]	@ (8000714 <GetSector+0x100>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d206      	bcs.n	800064c <GetSector+0x38>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a33      	ldr	r2, [pc, #204]	@ (8000710 <GetSector+0xfc>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d302      	bcc.n	800064c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 8000646:	2301      	movs	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e059      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <GetSector+0x104>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d206      	bcs.n	8000662 <GetSector+0x4e>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a2f      	ldr	r2, [pc, #188]	@ (8000714 <GetSector+0x100>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d302      	bcc.n	8000662 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 800065c:	2302      	movs	r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e04e      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a2d      	ldr	r2, [pc, #180]	@ (800071c <GetSector+0x108>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d806      	bhi.n	8000678 <GetSector+0x64>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a2a      	ldr	r2, [pc, #168]	@ (8000718 <GetSector+0x104>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d302      	bcc.n	8000678 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 8000672:	2303      	movs	r3, #3
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	e043      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a29      	ldr	r2, [pc, #164]	@ (8000720 <GetSector+0x10c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d806      	bhi.n	800068e <GetSector+0x7a>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a26      	ldr	r2, [pc, #152]	@ (800071c <GetSector+0x108>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d902      	bls.n	800068e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8000688:	2304      	movs	r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e038      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a24      	ldr	r2, [pc, #144]	@ (8000724 <GetSector+0x110>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d806      	bhi.n	80006a4 <GetSector+0x90>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <GetSector+0x10c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d902      	bls.n	80006a4 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 800069e:	2305      	movs	r3, #5
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e02d      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <GetSector+0x114>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d806      	bhi.n	80006ba <GetSector+0xa6>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000724 <GetSector+0x110>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d902      	bls.n	80006ba <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 80006b4:	2306      	movs	r3, #6
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e022      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <GetSector+0x118>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d806      	bhi.n	80006d0 <GetSector+0xbc>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <GetSector+0x114>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d902      	bls.n	80006d0 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 80006ca:	2307      	movs	r3, #7
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e017      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <GetSector+0x11c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d806      	bhi.n	80006e6 <GetSector+0xd2>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <GetSector+0x118>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d902      	bls.n	80006e6 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 80006e0:	2308      	movs	r3, #8
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e00c      	b.n	8000700 <GetSector+0xec>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <GetSector+0x120>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d806      	bhi.n	80006fc <GetSector+0xe8>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <GetSector+0x11c>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d902      	bls.n	80006fc <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 80006f6:	2309      	movs	r3, #9
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e001      	b.n	8000700 <GetSector+0xec>
  }
#if 1
  else/*(Address < FLASH_END_ADDR) && (Address >= FLASH_SECTOR_10))*/
  {
    sector = FLASH_SECTOR_10;  
 80006fc:	230a      	movs	r3, #10
 80006fe:	60fb      	str	r3, [r7, #12]
  else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23))*/
  {
    sector = FLASH_SECTOR_23;  
  }
#endif  
  return sector;
 8000700:	68fb      	ldr	r3, [r7, #12]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	08004000 	.word	0x08004000
 8000714:	08008000 	.word	0x08008000
 8000718:	0800c000 	.word	0x0800c000
 800071c:	0800ffff 	.word	0x0800ffff
 8000720:	0801ffff 	.word	0x0801ffff
 8000724:	0803ffff 	.word	0x0803ffff
 8000728:	0805ffff 	.word	0x0805ffff
 800072c:	0807ffff 	.word	0x0807ffff
 8000730:	0809ffff 	.word	0x0809ffff
 8000734:	080bffff 	.word	0x080bffff

08000738 <flash_erase>:
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
flash_status flash_erase(uint32_t address)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  //HAL_FLASH_Unlock();
  uint32_t ret;

  flash_status status = FLASH_ERROR;
 8000740:	23ff      	movs	r3, #255	@ 0xff
 8000742:	73fb      	strb	r3, [r7, #15]
  
  ret = FLASH_If_Erase(address);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff fee1 	bl	800050c <FLASH_If_Erase>
 800074a:	60b8      	str	r0, [r7, #8]
  if(ret == 0)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d102      	bne.n	8000758 <flash_erase+0x20>
  {
    status = FLASH_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	e001      	b.n	800075c <flash_erase+0x24>
  }
  else
  {
    status = FLASH_ERROR;
 8000758:	23ff      	movs	r3, #255	@ 0xff
 800075a:	73fb      	strb	r3, [r7, #15]
  }
  //HAL_FLASH_Lock();
  return status;
 800075c:	7bfb      	ldrb	r3, [r7, #15]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <flash_jump_to_app>:
    HAL_GPIO_WritePin(PMDLL_RESET_GPIO_Port, PMDLL_RESET_Pin, GPIO_PIN_SET);
}


void flash_jump_to_app(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <flash_jump_to_app+0x44>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <flash_jump_to_app+0x48>)
 8000774:	4013      	ands	r3, r2
 8000776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800077a:	d112      	bne.n	80007a2 <flash_jump_to_app+0x3a>
    {
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <flash_jump_to_app+0x4c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <flash_jump_to_app+0x50>)
 8000782:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <flash_jump_to_app+0x50>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <flash_jump_to_app+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <flash_jump_to_app+0x44>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f383 8808 	msr	MSP, r3
}
 800079a:	bf00      	nop
      JumpToApplication();
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <flash_jump_to_app+0x54>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4798      	blx	r3
   }

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08004000 	.word	0x08004000
 80007b0:	2ffe0000 	.word	0x2ffe0000
 80007b4:	08004004 	.word	0x08004004
 80007b8:	20000134 	.word	0x20000134
 80007bc:	20000130 	.word	0x20000130

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	int i;
	uint8_t rdata;
	int setup = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 ffd7 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f901 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 fa03 	bl	8000bdc <MX_GPIO_Init>
  MX_UART4_Init();
 80007d6:	f000 f983 	bl	8000ae0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80007da:	f000 f9d5 	bl	8000b88 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80007de:	f000 f965 	bl	8000aac <MX_IWDG_Init>
  MX_UART5_Init();
 80007e2:	f000 f9a7 	bl	8000b34 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 80007e6:	4868      	ldr	r0, [pc, #416]	@ (8000988 <main+0x1c8>)
 80007e8:	f000 fc92 	bl	8001110 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"UART Bootloader Ver:1.1\n\r");
 80007ec:	4867      	ldr	r0, [pc, #412]	@ (800098c <main+0x1cc>)
 80007ee:	f000 fc8f 	bl	8001110 <uart_transmit_str>
  /* Test if any sector of Flash memory where user application will be loaded is write protected */
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 80007f2:	f7ff fef1 	bl	80005d8 <FLASH_If_GetWriteProtectionStatus>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b65      	ldr	r3, [pc, #404]	@ (8000990 <main+0x1d0>)
 80007fc:	601a      	str	r2, [r3, #0]

  if(FlashProtection != FLASHIF_PROTECTION_NONE)
 80007fe:	4b64      	ldr	r3, [pc, #400]	@ (8000990 <main+0x1d0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <main+0x4c>
  {
  uart_transmit_str((uint8_t *)"Protection  enabled\n\r");
 8000806:	4863      	ldr	r0, [pc, #396]	@ (8000994 <main+0x1d4>)
 8000808:	f000 fc82 	bl	8001110 <uart_transmit_str>
  }
  uart_transmit_str((uint8_t *)"J : Jump to Main\n\r");
 800080c:	4862      	ldr	r0, [pc, #392]	@ (8000998 <main+0x1d8>)
 800080e:	f000 fc7f 	bl	8001110 <uart_transmit_str>
  uart_transmit_str((uint8_t *)"~ : Firmware Update(xmodem)\n\r");
 8000812:	4862      	ldr	r0, [pc, #392]	@ (800099c <main+0x1dc>)
 8000814:	f000 fc7c 	bl	8001110 <uart_transmit_str>
  uart_transmit_str((uint8_t *)"S : DataLink Setup\n\r");
 8000818:	4861      	ldr	r0, [pc, #388]	@ (80009a0 <main+0x1e0>)
 800081a:	f000 fc79 	bl	8001110 <uart_transmit_str>
  uart_transmit_str((uint8_t *)"P : DataLink Serial\n\r");
 800081e:	4861      	ldr	r0, [pc, #388]	@ (80009a4 <main+0x1e4>)
 8000820:	f000 fc76 	bl	8001110 <uart_transmit_str>
  uart_transmit_str((uint8_t *)"After 5 seconds,  Auto Jump to Main\n\r");
 8000824:	4860      	ldr	r0, [pc, #384]	@ (80009a8 <main+0x1e8>)
 8000826:	f000 fc73 	bl	8001110 <uart_transmit_str>

  for(i = 0; i < 50; i++)
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e072      	b.n	8000916 <main+0x156>
  {
      //HAL_Delay(100);
      if(setup == 0)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d11a      	bne.n	800086c <main+0xac>
      {
          if(i%10 == 0)
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	4b5c      	ldr	r3, [pc, #368]	@ (80009ac <main+0x1ec>)
 800083a:	fb83 2301 	smull	r2, r3, r3, r1
 800083e:	109a      	asrs	r2, r3, #2
 8000840:	17cb      	asrs	r3, r1, #31
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	1aca      	subs	r2, r1, r3
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10c      	bne.n	800086c <main+0xac>
          {
              uart_transmit_ch((uint8_t)('1'+(i/10)));
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4a55      	ldr	r2, [pc, #340]	@ (80009ac <main+0x1ec>)
 8000856:	fb82 1203 	smull	r1, r2, r2, r3
 800085a:	1092      	asrs	r2, r2, #2
 800085c:	17db      	asrs	r3, r3, #31
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	3331      	adds	r3, #49	@ 0x31
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fc78 	bl	800115c <uart_transmit_ch>
              //                  uart_transmit_str((uint8_t*)"\n\r");
              //uart_transmit_str((uint8_t *)"\033[F"); // Move cursor to the previous line
          }
      }
      if(HAL_UART_Receive(&huart4, (uint8_t*)&rdata, 1, 100) == HAL_OK)
 800086c:	1df9      	adds	r1, r7, #7
 800086e:	2364      	movs	r3, #100	@ 0x64
 8000870:	2201      	movs	r2, #1
 8000872:	484f      	ldr	r0, [pc, #316]	@ (80009b0 <main+0x1f0>)
 8000874:	f002 fc39 	bl	80030ea <HAL_UART_Receive>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d148      	bne.n	8000910 <main+0x150>
      {
          if(rdata == 'J')
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b4a      	cmp	r3, #74	@ 0x4a
 8000882:	d10c      	bne.n	800089e <main+0xde>
          {
              setup = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
              i = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
              HAL_GPIO_WritePin(PHY_RESET_GPIO_Port, PHY_RESET_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000892:	4848      	ldr	r0, [pc, #288]	@ (80009b4 <main+0x1f4>)
 8000894:	f001 fe98 	bl	80025c8 <HAL_GPIO_WritePin>
              flash_jump_to_app();
 8000898:	f7ff ff66 	bl	8000768 <flash_jump_to_app>
 800089c:	e038      	b.n	8000910 <main+0x150>

          }
          else if(rdata == '~')
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80008a2:	d10a      	bne.n	80008ba <main+0xfa>
          {
              setup = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
              HAL_GPIO_WritePin(PHY_RESET_GPIO_Port, PHY_RESET_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ae:	4841      	ldr	r0, [pc, #260]	@ (80009b4 <main+0x1f4>)
 80008b0:	f001 fe8a 	bl	80025c8 <HAL_GPIO_WritePin>
              i = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
              break;
 80008b8:	e030      	b.n	800091c <main+0x15c>
          }
          else if(rdata == 'S')
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b53      	cmp	r3, #83	@ 0x53
 80008be:	d10d      	bne.n	80008dc <main+0x11c>
          {
              uart_transmit_str((uint8_t *)"DataLink Setup start\n\r");
 80008c0:	483d      	ldr	r0, [pc, #244]	@ (80009b8 <main+0x1f8>)
 80008c2:	f000 fc25 	bl	8001110 <uart_transmit_str>
              setup = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	60bb      	str	r3, [r7, #8]
              i = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
              HAL_GPIO_WritePin(PHY_RESET_GPIO_Port, PHY_RESET_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d4:	4837      	ldr	r0, [pc, #220]	@ (80009b4 <main+0x1f4>)
 80008d6:	f001 fe77 	bl	80025c8 <HAL_GPIO_WritePin>
              break;
 80008da:	e01f      	b.n	800091c <main+0x15c>
          }
          else if(rdata == 'P')
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b50      	cmp	r3, #80	@ 0x50
 80008e0:	d116      	bne.n	8000910 <main+0x150>
          {
              uart_transmit_str((uint8_t *)"DataLink Serial start\n\r");
 80008e2:	4836      	ldr	r0, [pc, #216]	@ (80009bc <main+0x1fc>)
 80008e4:	f000 fc14 	bl	8001110 <uart_transmit_str>
              uart_transmit_str((uint8_t *)"waiting......\n\r");
 80008e8:	4835      	ldr	r0, [pc, #212]	@ (80009c0 <main+0x200>)
 80008ea:	f000 fc11 	bl	8001110 <uart_transmit_str>
              setup = 3;
 80008ee:	2303      	movs	r3, #3
 80008f0:	60bb      	str	r3, [r7, #8]
              i = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
              HAL_GPIO_WritePin(PHY_RESET_GPIO_Port, PHY_RESET_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fc:	482d      	ldr	r0, [pc, #180]	@ (80009b4 <main+0x1f4>)
 80008fe:	f001 fe63 	bl	80025c8 <HAL_GPIO_WritePin>
              uart4_interupt_set(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f000 fcb2 	bl	800126c <uart4_interupt_set>
              uart5_interupt_set(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fcd1 	bl	80012b0 <uart5_interupt_set>
              break;
 800090e:	e005      	b.n	800091c <main+0x15c>
  for(i = 0; i < 50; i++)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b31      	cmp	r3, #49	@ 0x31
 800091a:	dd89      	ble.n	8000830 <main+0x70>
          }
      }

  }

  if(setup == 0)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <main+0x166>
  {
      flash_jump_to_app();
 8000922:	f7ff ff21 	bl	8000768 <flash_jump_to_app>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(setup == 1)
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d108      	bne.n	800093e <main+0x17e>
	          {
	          /* Turn on the green LED to indicate, that we are in bootloader mode.*/
	          //	HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_SET);
	              /* Ask for new data and start the Xmodem protocol. */
	              uart_transmit_str((uint8_t*)"\n\rPlease send a new binary file with Xmodem protocol to update the firmware.\n\r");
 800092c:	4825      	ldr	r0, [pc, #148]	@ (80009c4 <main+0x204>)
 800092e:	f000 fbef 	bl	8001110 <uart_transmit_str>
	              xmodem_receive();
 8000932:	f000 fcdf 	bl	80012f4 <xmodem_receive>
	              /* We only exit the xmodem protocol, if there are any errors.
	              * In that case, notify the user and start over. */
	              uart_transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 8000936:	4824      	ldr	r0, [pc, #144]	@ (80009c8 <main+0x208>)
 8000938:	f000 fbea 	bl	8001110 <uart_transmit_str>
 800093c:	e7f3      	b.n	8000926 <main+0x166>
	          }
	          else if(setup == 3)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d11c      	bne.n	800097e <main+0x1be>
	          {
	              if(ringbuf_get(&uart4_buffer, &temp_data))
 8000944:	1dbb      	adds	r3, r7, #6
 8000946:	4619      	mov	r1, r3
 8000948:	4820      	ldr	r0, [pc, #128]	@ (80009cc <main+0x20c>)
 800094a:	f000 f9ff 	bl	8000d4c <ringbuf_get>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d003      	beq.n	800095c <main+0x19c>
	              {
	                  uart5_transmit_ch(temp_data);
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fc24 	bl	80011a4 <uart5_transmit_ch>
	              }
	              if(ringbuf_get(&uart5_buffer, &temp_data))
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	4619      	mov	r1, r3
 8000960:	481b      	ldr	r0, [pc, #108]	@ (80009d0 <main+0x210>)
 8000962:	f000 f9f3 	bl	8000d4c <ringbuf_get>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <main+0x1b6>
	              {
	                  uart_transmit_ch(temp_data);
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fbf4 	bl	800115c <uart_transmit_ch>
 8000974:	e7d7      	b.n	8000926 <main+0x166>
	              }
	              else
	              {
	                  HAL_Delay(10);
 8000976:	200a      	movs	r0, #10
 8000978:	f000 ff72 	bl	8001860 <HAL_Delay>
 800097c:	e7d3      	b.n	8000926 <main+0x166>
	              }
	          }
	          else
	          {
	              HAL_Delay(10);
 800097e:	200a      	movs	r0, #10
 8000980:	f000 ff6e 	bl	8001860 <HAL_Delay>
	  if(setup == 1)
 8000984:	e7cf      	b.n	8000926 <main+0x166>
 8000986:	bf00      	nop
 8000988:	08004564 	.word	0x08004564
 800098c:	0800458c 	.word	0x0800458c
 8000990:	20000138 	.word	0x20000138
 8000994:	080045a8 	.word	0x080045a8
 8000998:	080045c0 	.word	0x080045c0
 800099c:	080045d4 	.word	0x080045d4
 80009a0:	080045f4 	.word	0x080045f4
 80009a4:	0800460c 	.word	0x0800460c
 80009a8:	08004624 	.word	0x08004624
 80009ac:	66666667 	.word	0x66666667
 80009b0:	20000058 	.word	0x20000058
 80009b4:	40020400 	.word	0x40020400
 80009b8:	0800464c 	.word	0x0800464c
 80009bc:	08004664 	.word	0x08004664
 80009c0:	0800467c 	.word	0x0800467c
 80009c4:	0800468c 	.word	0x0800468c
 80009c8:	080046dc 	.word	0x080046dc
 80009cc:	2000013c 	.word	0x2000013c
 80009d0:	20000150 	.word	0x20000150

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	@ 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	@ 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fd86 	bl	80044f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <SystemClock_Config+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	4a28      	ldr	r2, [pc, #160]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a08:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <SystemClock_Config+0xd4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <SystemClock_Config+0xd4>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <SystemClock_Config+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a30:	2309      	movs	r3, #9
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a48:	2319      	movs	r3, #25
 8000a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a56:	2304      	movs	r3, #4
 8000a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fe10 	bl	8002684 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a6a:	f000 f969 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 f871 	bl	8002b74 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a98:	f000 f952 	bl	8000d40 <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	@ 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_IWDG_Init+0x2c>)
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <MX_IWDG_Init+0x30>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_IWDG_Init+0x2c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_IWDG_Init+0x2c>)
 8000abe:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000ac2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_IWDG_Init+0x2c>)
 8000ac6:	f001 fd98 	bl	80025fa <HAL_IWDG_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000ad0:	f000 f936 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000004c 	.word	0x2000004c
 8000adc:	40003000 	.word	0x40003000

08000ae0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <MX_UART4_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_UART4_Init+0x4c>)
 8000b18:	f002 fa0c 	bl	8002f34 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b22:	f000 f90d 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000058 	.word	0x20000058
 8000b30:	40004c00 	.word	0x40004c00

08000b34 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_UART5_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_UART5_Init+0x4c>)
 8000b6c:	f002 f9e2 	bl	8002f34 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f8e3 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000a0 	.word	0x200000a0
 8000b84:	40005000 	.word	0x40005000

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <MX_USART1_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f002 f9b8 	bl	8002f34 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f000 f8b9 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000e8 	.word	0x200000e8
 8000bd8:	40011000 	.word	0x40011000

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b4b      	ldr	r3, [pc, #300]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b47      	ldr	r3, [pc, #284]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a46      	ldr	r2, [pc, #280]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b44      	ldr	r3, [pc, #272]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a3f      	ldr	r2, [pc, #252]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b39      	ldr	r3, [pc, #228]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a38      	ldr	r2, [pc, #224]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <MX_GPIO_Init+0x154>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PHY_RESET_GPIO_Port, PHY_RESET_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c84:	482b      	ldr	r0, [pc, #172]	@ (8000d34 <MX_GPIO_Init+0x158>)
 8000c86:	f001 fc9f 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMDLL_CONFIG_GPIO_Port, PMDLL_CONFIG_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2180      	movs	r1, #128	@ 0x80
 8000c8e:	482a      	ldr	r0, [pc, #168]	@ (8000d38 <MX_GPIO_Init+0x15c>)
 8000c90:	f001 fc9a 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMDLL_RESET_GPIO_Port, PMDLL_RESET_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2102      	movs	r1, #2
 8000c98:	4828      	ldr	r0, [pc, #160]	@ (8000d3c <MX_GPIO_Init+0x160>)
 8000c9a:	f001 fc95 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PHY_RESET_Pin */
  GPIO_InitStruct.Pin = PHY_RESET_Pin;
 8000c9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PHY_RESET_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <MX_GPIO_Init+0x158>)
 8000cb8:	f001 faea 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAN_TX_LED_Pin LAN_LINK_LED_Pin */
  GPIO_InitStruct.Pin = LAN_TX_LED_Pin|LAN_LINK_LED_Pin;
 8000cbc:	f248 0308 	movw	r3, #32776	@ 0x8008
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481a      	ldr	r0, [pc, #104]	@ (8000d3c <MX_GPIO_Init+0x160>)
 8000cd2:	f001 fadd 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAN_RX_LED_Pin PMDLL_STATUS_Pin */
  GPIO_InitStruct.Pin = LAN_RX_LED_Pin|PMDLL_STATUS_Pin;
 8000cd6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4813      	ldr	r0, [pc, #76]	@ (8000d38 <MX_GPIO_Init+0x15c>)
 8000cec:	f001 fad0 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMDLL_CONFIG_Pin */
  GPIO_InitStruct.Pin = PMDLL_CONFIG_Pin;
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PMDLL_CONFIG_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <MX_GPIO_Init+0x15c>)
 8000d08:	f001 fac2 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMDLL_RESET_Pin */
  GPIO_InitStruct.Pin = PMDLL_RESET_Pin;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PMDLL_RESET_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <MX_GPIO_Init+0x160>)
 8000d24:	f001 fab4 	bl	8002290 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020400 	.word	0x40020400
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <ringbuf_get>:
  rb->size  = size;
  rb->pr = rb->pw = 0;
}

uint32_t ringbuf_get(ringbuf *rb, uint8_t *data)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  if (rb->pr == rb->pw) return 0;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d101      	bne.n	8000d66 <ringbuf_get+0x1a>
 8000d62:	2300      	movs	r3, #0
 8000d64:	e014      	b.n	8000d90 <ringbuf_get+0x44>
  *data = rb->buf[rb->pr];
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	701a      	strb	r2, [r3, #0]
  rb->pr = (rb->pr + 1) % rb->size;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6852      	ldr	r2, [r2, #4]
 8000d80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d84:	fb01 f202 	mul.w	r2, r1, r2
 8000d88:	1a9a      	subs	r2, r3, r2
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60da      	str	r2, [r3, #12]
  return 1;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <ringbuf_put>:

uint32_t ringbuf_put(ringbuf *rb, uint8_t data)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
  uint32_t next;
  next = (rb->pw + 1) % rb->size;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	3301      	adds	r3, #1
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6852      	ldr	r2, [r2, #4]
 8000db2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000db6:	fb01 f202 	mul.w	r2, r1, r2
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  if (next == rb->pr) return 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d101      	bne.n	8000dcc <ringbuf_put+0x30>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e00a      	b.n	8000de2 <ringbuf_put+0x46>
  rb->buf[rb->pw] = data;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	701a      	strb	r2, [r3, #0]
  rb->pw = next;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	609a      	str	r2, [r3, #8]
  return 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	@ 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a67      	ldr	r2, [pc, #412]	@ (8000ffc <HAL_UART_MspInit+0x1bc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d135      	bne.n	8000ece <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	4b66      	ldr	r3, [pc, #408]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a65      	ldr	r2, [pc, #404]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000e6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e72:	4b63      	ldr	r3, [pc, #396]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e7a:	623b      	str	r3, [r7, #32]
 8000e7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	4b5f      	ldr	r3, [pc, #380]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a5e      	ldr	r2, [pc, #376]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	61fb      	str	r3, [r7, #28]
 8000e98:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8000e9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000eac:	2308      	movs	r3, #8
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4853      	ldr	r0, [pc, #332]	@ (8001004 <HAL_UART_MspInit+0x1c4>)
 8000eb8:	f001 f9ea 	bl	8002290 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2034      	movs	r0, #52	@ 0x34
 8000ec2:	f000 fdcc 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ec6:	2034      	movs	r0, #52	@ 0x34
 8000ec8:	f000 fde5 	bl	8001a96 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ecc:	e092      	b.n	8000ff4 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART5)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8001008 <HAL_UART_MspInit+0x1c8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d153      	bne.n	8000f80 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	4b48      	ldr	r3, [pc, #288]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	4a47      	ldr	r2, [pc, #284]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee8:	4b45      	ldr	r3, [pc, #276]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	4b41      	ldr	r3, [pc, #260]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	4a40      	ldr	r2, [pc, #256]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f04:	4b3e      	ldr	r3, [pc, #248]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	4b3a      	ldr	r3, [pc, #232]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	4a39      	ldr	r2, [pc, #228]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f20:	4b37      	ldr	r3, [pc, #220]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	482e      	ldr	r0, [pc, #184]	@ (8001004 <HAL_UART_MspInit+0x1c4>)
 8000f4a:	f001 f9a1 	bl	8002290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4828      	ldr	r0, [pc, #160]	@ (800100c <HAL_UART_MspInit+0x1cc>)
 8000f6a:	f001 f991 	bl	8002290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2035      	movs	r0, #53	@ 0x35
 8000f74:	f000 fd73 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f78:	2035      	movs	r0, #53	@ 0x35
 8000f7a:	f000 fd8c 	bl	8001a96 <HAL_NVIC_EnableIRQ>
}
 8000f7e:	e039      	b.n	8000ff4 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a22      	ldr	r2, [pc, #136]	@ (8001010 <HAL_UART_MspInit+0x1d0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d134      	bne.n	8000ff4 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_UART_MspInit+0x1c0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8000fc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <HAL_UART_MspInit+0x1d4>)
 8000fe0:	f001 f956 	bl	8002290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2025      	movs	r0, #37	@ 0x25
 8000fea:	f000 fd38 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fee:	2025      	movs	r0, #37	@ 0x25
 8000ff0:	f000 fd51 	bl	8001a96 <HAL_NVIC_EnableIRQ>
}
 8000ff4:	bf00      	nop
 8000ff6:	3738      	adds	r7, #56	@ 0x38
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40004c00 	.word	0x40004c00
 8001000:	40023800 	.word	0x40023800
 8001004:	40020800 	.word	0x40020800
 8001008:	40005000 	.word	0x40005000
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40011000 	.word	0x40011000
 8001014:	40020000 	.word	0x40020000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 fbd7 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <USART1_IRQHandler+0x10>)
 800107e:	f002 fa8d 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000e8 	.word	0x200000e8

0800108c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <UART4_IRQHandler+0x10>)
 8001092:	f002 fa83 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000058 	.word	0x20000058

080010a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <UART5_IRQHandler+0x10>)
 80010a6:	f002 fa79 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000a0 	.word	0x200000a0

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <uart_receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status uart_receive(uint8_t *data, uint16_t length)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
	uart_status status = UART_ERROR;
 80010e4:	23ff      	movs	r3, #255	@ 0xff
 80010e6:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK == HAL_UART_Receive(&huart4, data, length, UART_TIMEOUT))
 80010e8:	887a      	ldrh	r2, [r7, #2]
 80010ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4806      	ldr	r0, [pc, #24]	@ (800110c <uart_receive+0x34>)
 80010f2:	f001 fffa 	bl	80030ea <HAL_UART_Receive>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <uart_receive+0x28>
	{
		status = UART_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000058 	.word	0x20000058

08001110 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	uart_status status = UART_ERROR;
 8001118:	23ff      	movs	r3, #255	@ 0xff
 800111a:	73fb      	strb	r3, [r7, #15]
	uint16_t length = 0u;
 800111c:	2300      	movs	r3, #0
 800111e:	81bb      	strh	r3, [r7, #12]

	/* Calculate the length. */
	while ('\0' != data[length])
 8001120:	e002      	b.n	8001128 <uart_transmit_str+0x18>
	{
		length++;
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	3301      	adds	r3, #1
 8001126:	81bb      	strh	r3, [r7, #12]
	while ('\0' != data[length])
 8001128:	89bb      	ldrh	r3, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f6      	bne.n	8001122 <uart_transmit_str+0x12>
	}

	if (HAL_OK == HAL_UART_Transmit(&huart4, data, length, UART_TIMEOUT))
 8001134:	89ba      	ldrh	r2, [r7, #12]
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4806      	ldr	r0, [pc, #24]	@ (8001158 <uart_transmit_str+0x48>)
 800113e:	f001 ff49 	bl	8002fd4 <HAL_UART_Transmit>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <uart_transmit_str+0x3c>
	{
		status = UART_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000058 	.word	0x20000058

0800115c <uart_transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_ch(uint8_t data)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	uart_status status = UART_ERROR;
 8001166:	23ff      	movs	r3, #255	@ 0xff
 8001168:	73fb      	strb	r3, [r7, #15]

	/* Make available the UART module. */
	if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&huart4))
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <uart_transmit_ch+0x44>)
 800116c:	f002 fcea 	bl	8003b44 <HAL_UART_GetState>
 8001170:	4603      	mov	r3, r0
 8001172:	2ba0      	cmp	r3, #160	@ 0xa0
 8001174:	d102      	bne.n	800117c <uart_transmit_ch+0x20>
	{
		HAL_UART_Abort(&huart4);
 8001176:	480a      	ldr	r0, [pc, #40]	@ (80011a0 <uart_transmit_ch+0x44>)
 8001178:	f002 f873 	bl	8003262 <HAL_UART_Abort>
	}

	if (HAL_OK == HAL_UART_Transmit(&huart4, &data, 1u, UART_TIMEOUT))
 800117c:	1df9      	adds	r1, r7, #7
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	2201      	movs	r2, #1
 8001184:	4806      	ldr	r0, [pc, #24]	@ (80011a0 <uart_transmit_ch+0x44>)
 8001186:	f001 ff25 	bl	8002fd4 <HAL_UART_Transmit>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <uart_transmit_ch+0x38>
	{
		status = UART_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000058 	.word	0x20000058

080011a4 <uart5_transmit_ch>:
	{
	}
}

uart_status uart5_transmit_ch(uint8_t data)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	uart_status status = UART_ERROR;
 80011ae:	23ff      	movs	r3, #255	@ 0xff
 80011b0:	73fb      	strb	r3, [r7, #15]

	/* Make available the UART module. */
	if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&huart5))
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <uart5_transmit_ch+0x44>)
 80011b4:	f002 fcc6 	bl	8003b44 <HAL_UART_GetState>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80011bc:	d102      	bne.n	80011c4 <uart5_transmit_ch+0x20>
	{
		HAL_UART_Abort(&huart5);
 80011be:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <uart5_transmit_ch+0x44>)
 80011c0:	f002 f84f 	bl	8003262 <HAL_UART_Abort>
	}

	if (HAL_OK == HAL_UART_Transmit(&huart5, &data, 1u, UART_TIMEOUT))
 80011c4:	1df9      	adds	r1, r7, #7
 80011c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ca:	2201      	movs	r2, #1
 80011cc:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <uart5_transmit_ch+0x44>)
 80011ce:	f001 ff01 	bl	8002fd4 <HAL_UART_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <uart5_transmit_ch+0x38>
	{
		status = UART_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200000a0 	.word	0x200000a0

080011ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <HAL_UART_RxCpltCallback+0x5c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10b      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x2a>
	{
		ringbuf_put(&uart4_buffer, (uint8_t) (uart4_data));
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <HAL_UART_RxCpltCallback+0x60>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	4812      	ldr	r0, [pc, #72]	@ (8001250 <HAL_UART_RxCpltCallback+0x64>)
 8001206:	f7ff fdc9 	bl	8000d9c <ringbuf_put>
		HAL_UART_Receive_IT(&huart4, &uart4_data, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	490f      	ldr	r1, [pc, #60]	@ (800124c <HAL_UART_RxCpltCallback+0x60>)
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <HAL_UART_RxCpltCallback+0x68>)
 8001210:	f002 f802 	bl	8003218 <HAL_UART_Receive_IT>
		return;
 8001214:	e014      	b.n	8001240 <HAL_UART_RxCpltCallback+0x54>
	}


	if (uart5_interupt_enabled == 1)
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <HAL_UART_RxCpltCallback+0x6c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d110      	bne.n	8001240 <HAL_UART_RxCpltCallback+0x54>
	{
		if (huart->Instance == UART5)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <HAL_UART_RxCpltCallback+0x70>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d10b      	bne.n	8001240 <HAL_UART_RxCpltCallback+0x54>
		{
			ringbuf_put(&uart5_buffer, (uint8_t) (uart5_data));
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_UART_RxCpltCallback+0x74>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	@ (8001264 <HAL_UART_RxCpltCallback+0x78>)
 8001230:	f7ff fdb4 	bl	8000d9c <ringbuf_put>
			HAL_UART_Receive_IT(&huart5, &uart5_data, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	490a      	ldr	r1, [pc, #40]	@ (8001260 <HAL_UART_RxCpltCallback+0x74>)
 8001238:	480b      	ldr	r0, [pc, #44]	@ (8001268 <HAL_UART_RxCpltCallback+0x7c>)
 800123a:	f001 ffed 	bl	8003218 <HAL_UART_Receive_IT>
			return;
 800123e:	bf00      	nop
		}
	}

}
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40004c00 	.word	0x40004c00
 800124c:	2000014c 	.word	0x2000014c
 8001250:	2000013c 	.word	0x2000013c
 8001254:	20000058 	.word	0x20000058
 8001258:	20000162 	.word	0x20000162
 800125c:	40005000 	.word	0x40005000
 8001260:	20000160 	.word	0x20000160
 8001264:	20000150 	.word	0x20000150
 8001268:	200000a0 	.word	0x200000a0

0800126c <uart4_interupt_set>:
	ringbuf_init(&uart5_buffer, uart5_rawbuffer, RBSIZE);     //

}

void uart4_interupt_set(uint8_t enable)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if (enable == 1)
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <uart4_interupt_set+0x22>
	{
		uart4_interupt_enabled = 1;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <uart4_interupt_set+0x38>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &uart4_data, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <uart4_interupt_set+0x3c>)
 8001286:	4809      	ldr	r0, [pc, #36]	@ (80012ac <uart4_interupt_set+0x40>)
 8001288:	f001 ffc6 	bl	8003218 <HAL_UART_Receive_IT>
	else
	{
		uart4_interupt_enabled = 0;
		HAL_UART_AbortReceive_IT(&huart4);
	}
}
 800128c:	e005      	b.n	800129a <uart4_interupt_set+0x2e>
		uart4_interupt_enabled = 0;
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <uart4_interupt_set+0x38>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart4);
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <uart4_interupt_set+0x40>)
 8001296:	f002 f8cf 	bl	8003438 <HAL_UART_AbortReceive_IT>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000161 	.word	0x20000161
 80012a8:	2000014c 	.word	0x2000014c
 80012ac:	20000058 	.word	0x20000058

080012b0 <uart5_interupt_set>:
void uart5_interupt_set(uint8_t enable)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	if (enable == 1)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <uart5_interupt_set+0x22>
	{
		uart5_interupt_enabled = 1;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <uart5_interupt_set+0x38>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &uart5_data, 1);
 80012c6:	2201      	movs	r2, #1
 80012c8:	4908      	ldr	r1, [pc, #32]	@ (80012ec <uart5_interupt_set+0x3c>)
 80012ca:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <uart5_interupt_set+0x40>)
 80012cc:	f001 ffa4 	bl	8003218 <HAL_UART_Receive_IT>
	else
	{
		uart5_interupt_enabled = 0;
		HAL_UART_AbortReceive_IT(&huart5);
	}
}
 80012d0:	e005      	b.n	80012de <uart5_interupt_set+0x2e>
		uart5_interupt_enabled = 0;
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <uart5_interupt_set+0x38>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart5);
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <uart5_interupt_set+0x40>)
 80012da:	f002 f8ad 	bl	8003438 <HAL_UART_AbortReceive_IT>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000162 	.word	0x20000162
 80012ec:	20000160 	.word	0x20000160
 80012f0:	200000a0 	.word	0x200000a0

080012f4 <xmodem_receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	volatile xmodem_status status = X_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	717b      	strb	r3, [r7, #5]
	uint8_t error_number = 0u;
 80012fe:	2300      	movs	r3, #0
 8001300:	713b      	strb	r3, [r7, #4]

	x_first_packet_received = false;
 8001302:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <xmodem_receive+0x12c>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	xmodem_packet_number = 1u;
 8001308:	4b46      	ldr	r3, [pc, #280]	@ (8001424 <xmodem_receive+0x130>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
	xmodem_actual_flash_address = APPLICATION_ADDRESS;
 800130e:	4b46      	ldr	r3, [pc, #280]	@ (8001428 <xmodem_receive+0x134>)
 8001310:	4a46      	ldr	r2, [pc, #280]	@ (800142c <xmodem_receive+0x138>)
 8001312:	601a      	str	r2, [r3, #0]

	/* Loop until there isn't any error (or until we jump to the user application). */
	while (X_OK == status)
 8001314:	e07a      	b.n	800140c <xmodem_receive+0x118>
	{
		uint8_t header = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	70fb      	strb	r3, [r7, #3]

		/* Get the header from UART. */
		uart_status comm_status = uart_receive(&header, 1u);
 800131a:	1cfb      	adds	r3, r7, #3
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff feda 	bl	80010d8 <uart_receive>
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]

		/* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
		if ((UART_OK != comm_status) && (false == x_first_packet_received))
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d015      	beq.n	800135a <xmodem_receive+0x66>
 800132e:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <xmodem_receive+0x12c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d111      	bne.n	800135a <xmodem_receive+0x66>
		{
			(void) uart_transmit_ch(X_C);
 8001336:	2043      	movs	r0, #67	@ 0x43
 8001338:	f7ff ff10 	bl	800115c <uart_transmit_ch>

			check_count++;
 800133c:	4b3c      	ldr	r3, [pc, #240]	@ (8001430 <xmodem_receive+0x13c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a3b      	ldr	r2, [pc, #236]	@ (8001430 <xmodem_receive+0x13c>)
 8001344:	6013      	str	r3, [r2, #0]
			if (check_count > 60)
 8001346:	4b3a      	ldr	r3, [pc, #232]	@ (8001430 <xmodem_receive+0x13c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b3c      	cmp	r3, #60	@ 0x3c
 800134c:	dd13      	ble.n	8001376 <xmodem_receive+0x82>
			{
				check_count = 0;
 800134e:	4b38      	ldr	r3, [pc, #224]	@ (8001430 <xmodem_receive+0x13c>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
				flash_jump_to_app();
 8001354:	f7ff fa08 	bl	8000768 <flash_jump_to_app>
			if (check_count > 60)
 8001358:	e00d      	b.n	8001376 <xmodem_receive+0x82>

			}

		}
		/* Uart timeout or any other errors. */
		else if ((UART_OK != comm_status) && (true == x_first_packet_received))
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00a      	beq.n	8001376 <xmodem_receive+0x82>
 8001360:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <xmodem_receive+0x12c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d106      	bne.n	8001376 <xmodem_receive+0x82>
		{
			status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2103      	movs	r1, #3
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f999 	bl	80016a4 <xmodem_error_handler>
 8001372:	4603      	mov	r3, r0
 8001374:	717b      	strb	r3, [r7, #5]
			/* Do nothing. */
		}

		/* The header can be: SOH, STX, EOT and CAN. */

		xmodem_status packet_status = X_ERROR;
 8001376:	23ff      	movs	r3, #255	@ 0xff
 8001378:	71bb      	strb	r3, [r7, #6]

		switch (header)
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	2b18      	cmp	r3, #24
 800137e:	d037      	beq.n	80013f0 <xmodem_receive+0xfc>
 8001380:	2b18      	cmp	r3, #24
 8001382:	dc38      	bgt.n	80013f6 <xmodem_receive+0x102>
 8001384:	2b02      	cmp	r3, #2
 8001386:	dc02      	bgt.n	800138e <xmodem_receive+0x9a>
 8001388:	2b00      	cmp	r3, #0
 800138a:	dc03      	bgt.n	8001394 <xmodem_receive+0xa0>
 800138c:	e033      	b.n	80013f6 <xmodem_receive+0x102>
 800138e:	2b04      	cmp	r3, #4
 8001390:	d022      	beq.n	80013d8 <xmodem_receive+0xe4>
 8001392:	e030      	b.n	80013f6 <xmodem_receive+0x102>
		{
		/* 128 or 1024 bytes of data. */
		case X_SOH:
		case X_STX:
			/* If the handling was successful, then send an ACK. */
			packet_status = xmodem_handle_packet(header);
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f88c 	bl	80014b4 <xmodem_handle_packet>
 800139c:	4603      	mov	r3, r0
 800139e:	71bb      	strb	r3, [r7, #6]
			if (X_OK == packet_status)
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d103      	bne.n	80013ae <xmodem_receive+0xba>
			{
				(void) uart_transmit_ch(X_ACK);
 80013a6:	2006      	movs	r0, #6
 80013a8:	f7ff fed8 	bl	800115c <uart_transmit_ch>
			/* Error while processing the packet, either send a NAK or do graceful abort. */
			else
			{
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
			}
			break;
 80013ac:	e02e      	b.n	800140c <xmodem_receive+0x118>
			else if (X_ERROR_FLASH == packet_status)
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d109      	bne.n	80013c8 <xmodem_receive+0xd4>
				error_number = X_MAX_ERRORS;
 80013b4:	2303      	movs	r3, #3
 80013b6:	713b      	strb	r3, [r7, #4]
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2103      	movs	r1, #3
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f971 	bl	80016a4 <xmodem_error_handler>
 80013c2:	4603      	mov	r3, r0
 80013c4:	717b      	strb	r3, [r7, #5]
			break;
 80013c6:	e021      	b.n	800140c <xmodem_receive+0x118>
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2103      	movs	r1, #3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f969 	bl	80016a4 <xmodem_error_handler>
 80013d2:	4603      	mov	r3, r0
 80013d4:	717b      	strb	r3, [r7, #5]
			break;
 80013d6:	e019      	b.n	800140c <xmodem_receive+0x118>
		/* End of Transmission. */
		case X_EOT:
			/* ACK, feedback to user (as a text), then jump to user application. */
			(void) uart_transmit_ch(X_ACK);
 80013d8:	2006      	movs	r0, #6
 80013da:	f7ff febf 	bl	800115c <uart_transmit_ch>
			(void) uart_transmit_str((uint8_t*) "\n\rFirmware updated!\n\r");
 80013de:	4815      	ldr	r0, [pc, #84]	@ (8001434 <xmodem_receive+0x140>)
 80013e0:	f7ff fe96 	bl	8001110 <uart_transmit_str>
			(void) uart_transmit_str(
 80013e4:	4814      	ldr	r0, [pc, #80]	@ (8001438 <xmodem_receive+0x144>)
 80013e6:	f7ff fe93 	bl	8001110 <uart_transmit_str>
					(uint8_t*) "Jumping to user application...\n\r");
			flash_jump_to_app();
 80013ea:	f7ff f9bd 	bl	8000768 <flash_jump_to_app>
			break;
 80013ee:	e00d      	b.n	800140c <xmodem_receive+0x118>
		/* Abort from host. */
		case X_CAN:
			status = X_ERROR;
 80013f0:	23ff      	movs	r3, #255	@ 0xff
 80013f2:	717b      	strb	r3, [r7, #5]
			break;
 80013f4:	e00a      	b.n	800140c <xmodem_receive+0x118>
		default:
		/* Wrong header. */
			if (UART_OK == comm_status)
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <xmodem_receive+0x116>
			{
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2103      	movs	r1, #3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f94f 	bl	80016a4 <xmodem_error_handler>
 8001406:	4603      	mov	r3, r0
 8001408:	717b      	strb	r3, [r7, #5]
			}
			break;
 800140a:	bf00      	nop
	while (X_OK == status)
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d080      	beq.n	8001316 <xmodem_receive+0x22>
		}
	}
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000168 	.word	0x20000168
 8001424:	20000004 	.word	0x20000004
 8001428:	20000164 	.word	0x20000164
 800142c:	08004000 	.word	0x08004000
 8001430:	2000016c 	.word	0x2000016c
 8001434:	080046fc 	.word	0x080046fc
 8001438:	08004714 	.word	0x08004714

0800143c <xmodem_calc_crc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0u;
 8001448:	2300      	movs	r3, #0
 800144a:	81fb      	strh	r3, [r7, #14]
	while (length)
 800144c:	e027      	b.n	800149e <xmodem_calc_crc+0x62>
	{
		length--;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	3b01      	subs	r3, #1
 8001452:	807b      	strh	r3, [r7, #2]
		crc = crc ^ ((uint16_t) *data++ << 8u);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21b      	sxth	r3, r3
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001466:	4053      	eors	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0u; i < 8u; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	737b      	strb	r3, [r7, #13]
 8001470:	e012      	b.n	8001498 <xmodem_calc_crc+0x5c>
		{
			if (crc & 0x8000u)
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	2b00      	cmp	r3, #0
 8001478:	da08      	bge.n	800148c <xmodem_calc_crc+0x50>
			{
				crc = (crc << 1u) ^ 0x1021u;
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001484:	f083 0301 	eor.w	r3, r3, #1
 8001488:	81fb      	strh	r3, [r7, #14]
 800148a:	e002      	b.n	8001492 <xmodem_calc_crc+0x56>
			}
			else
			{
				crc = crc << 1u;
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0u; i < 8u; i++)
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	3301      	adds	r3, #1
 8001496:	737b      	strb	r3, [r7, #13]
 8001498:	7b7b      	ldrb	r3, [r7, #13]
 800149a:	2b07      	cmp	r3, #7
 800149c:	d9e9      	bls.n	8001472 <xmodem_calc_crc+0x36>
	while (length)
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1d4      	bne.n	800144e <xmodem_calc_crc+0x12>
			}
		}
	}
	return crc;
 80014a4:	89fb      	ldrh	r3, [r7, #14]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4602      	mov	r2, r0
 80014be:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80014c2:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 80014c6:	701a      	strb	r2, [r3, #0]
	xmodem_status status = X_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
	uint16_t size = 0u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
	uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
	uint8_t received_packet_data[X_PACKET_1024_SIZE];
	uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

	/* Get the size of the data. */
	if (X_SOH == header)
 80014d4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80014d8:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d103      	bne.n	80014ea <xmodem_handle_packet+0x36>
	{
		size = X_PACKET_128_SIZE;
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 80014e8:	e00e      	b.n	8001508 <xmodem_handle_packet+0x54>
	}
	else if (X_STX == header)
 80014ea:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80014ee:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d104      	bne.n	8001502 <xmodem_handle_packet+0x4e>
	{
		size = X_PACKET_1024_SIZE;
 80014f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014fc:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 8001500:	e002      	b.n	8001508 <xmodem_handle_packet+0x54>
	}
	else
	{
		/* Wrong header type. This shoudn't be possible... */
		status |= X_ERROR;
 8001502:	23ff      	movs	r3, #255	@ 0xff
 8001504:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
	}

	uart_status comm_status = UART_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
	/* Get the packet number, data and CRC from UART. */
	comm_status |= uart_receive(&received_packet_number[0u],
 800150e:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fddf 	bl	80010d8 <uart_receive>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001522:	4313      	orrs	r3, r2
 8001524:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
	X_PACKET_NUMBER_SIZE);
	comm_status |= uart_receive(&received_packet_data[0u], size);
 8001528:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	@ 0x414
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fdd0 	bl	80010d8 <uart_receive>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001540:	4313      	orrs	r3, r2
 8001542:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
	comm_status |= uart_receive(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	2102      	movs	r1, #2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fdc3 	bl	80010d8 <uart_receive>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800155a:	4313      	orrs	r3, r2
 800155c:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
	/* Merge the two bytes of CRC. */
	uint16_t crc_received =
			((uint16_t) received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u)
 8001560:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001564:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001568:	781b      	ldrb	r3, [r3, #0]
					| ((uint16_t) received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
 800156a:	b21b      	sxth	r3, r3
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001574:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001578:	785b      	ldrb	r3, [r3, #1]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
	uint16_t crc_received =
 8001580:	f8a7 3410 	strh.w	r3, [r7, #1040]	@ 0x410
	/* We calculate it too. */
	uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
 8001584:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	@ 0x414
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff54 	bl	800143c <xmodem_calc_crc>
 8001594:	4603      	mov	r3, r0
 8001596:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e

	/* Communication error. */
	if (UART_OK != comm_status)
 800159a:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <xmodem_handle_packet+0xfa>
	{
		status |= X_ERROR_UART;
 80015a2:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
	}

	/* If it is the first packet, then erase the memory. */
	if ((X_OK == status) && (false == x_first_packet_received))
 80015ae:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d113      	bne.n	80015de <xmodem_handle_packet+0x12a>
 80015b6:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <xmodem_handle_packet+0x1e0>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10f      	bne.n	80015de <xmodem_handle_packet+0x12a>
	{
		if (FLASH_OK == flash_erase(APPLICATION_ADDRESS))
 80015be:	4836      	ldr	r0, [pc, #216]	@ (8001698 <xmodem_handle_packet+0x1e4>)
 80015c0:	f7ff f8ba 	bl	8000738 <flash_erase>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <xmodem_handle_packet+0x11e>
		{
			x_first_packet_received = true;
 80015ca:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <xmodem_handle_packet+0x1e0>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e005      	b.n	80015de <xmodem_handle_packet+0x12a>
		}
		else
		{
			status |= X_ERROR_FLASH;
 80015d2:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
		}
	}

	/* Error handling and flashing. */
	if (X_OK == status)
 80015de:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d125      	bne.n	8001632 <xmodem_handle_packet+0x17e>
	{
		if (xmodem_packet_number != received_packet_number[0u])
 80015e6:	f897 240c 	ldrb.w	r2, [r7, #1036]	@ 0x40c
 80015ea:	4b2c      	ldr	r3, [pc, #176]	@ (800169c <xmodem_handle_packet+0x1e8>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d005      	beq.n	80015fe <xmodem_handle_packet+0x14a>
		{
			/* Packet number counter mismatch. */
			status |= X_ERROR_NUMBER;
 80015f2:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
		}
		if (255u
				!= (received_packet_number[X_PACKET_NUMBER_INDEX]
 80015fe:	f897 340c 	ldrb.w	r3, [r7, #1036]	@ 0x40c
 8001602:	461a      	mov	r2, r3
						+ received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
 8001604:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8001608:	4413      	add	r3, r2
		if (255u
 800160a:	2bff      	cmp	r3, #255	@ 0xff
 800160c:	d005      	beq.n	800161a <xmodem_handle_packet+0x166>
		{
			/* The sum of the packet number and packet number complement aren't 255. */
			/* The sum always has to be 255. */
			status |= X_ERROR_NUMBER;
 800160e:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
		}
		if (crc_calculated != crc_received)
 800161a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	@ 0x40e
 800161e:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 8001622:	429a      	cmp	r2, r3
 8001624:	d005      	beq.n	8001632 <xmodem_handle_packet+0x17e>
		{
			/* The calculated and received CRC are different. */
			status |= X_ERROR_CRC;
 8001626:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
		}
	}

	/* Do the actual flashing (if there weren't any errors). */
	if ((X_OK == status)
 8001632:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8001636:	2b00      	cmp	r3, #0
 8001638:	d114      	bne.n	8001664 <xmodem_handle_packet+0x1b0>
			&& (FLASH_OK
					!= flash_write(xmodem_actual_flash_address,
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <xmodem_handle_packet+0x1ec>)
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	b29b      	uxth	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	f000 f84f 	bl	80016f0 <flash_write>
 8001652:	4603      	mov	r3, r0
			&& (FLASH_OK
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <xmodem_handle_packet+0x1b0>
							(uint32_t*) &received_packet_data[0u],
							(uint32_t) size / 4u)))
	{
		/* Flashing error. */
		status |= X_ERROR_FLASH;
 8001658:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
	}

	/* Raise the packet number and the address counters (if there weren't any errors). */
	if (X_OK == status)
 8001664:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10c      	bne.n	8001686 <xmodem_handle_packet+0x1d2>
	{
		xmodem_packet_number++;
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <xmodem_handle_packet+0x1e8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <xmodem_handle_packet+0x1e8>)
 8001676:	701a      	strb	r2, [r3, #0]
		xmodem_actual_flash_address += size;
 8001678:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	@ 0x414
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <xmodem_handle_packet+0x1ec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4413      	add	r3, r2
 8001682:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <xmodem_handle_packet+0x1ec>)
 8001684:	6013      	str	r3, [r2, #0]
	}

	return status;
 8001686:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
}
 800168a:	4618      	mov	r0, r3
 800168c:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000168 	.word	0x20000168
 8001698:	08004000 	.word	0x08004000
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000164 	.word	0x20000164

080016a4 <xmodem_error_handler>:
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number,
		uint8_t max_error_number)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d808      	bhi.n	80016dc <xmodem_error_handler+0x38>
	{
		/* Graceful abort. */
		(void) uart_transmit_ch(X_CAN);
 80016ca:	2018      	movs	r0, #24
 80016cc:	f7ff fd46 	bl	800115c <uart_transmit_ch>
		(void) uart_transmit_ch(X_CAN);
 80016d0:	2018      	movs	r0, #24
 80016d2:	f7ff fd43 	bl	800115c <uart_transmit_ch>
		status = X_ERROR;
 80016d6:	23ff      	movs	r3, #255	@ 0xff
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e004      	b.n	80016e6 <xmodem_error_handler+0x42>
	}
	/* Otherwise send a NAK for a repeat. */
	else
	{
		(void) uart_transmit_ch(X_NAK);
 80016dc:	2015      	movs	r0, #21
 80016de:	f7ff fd3d 	bl	800115c <uart_transmit_ch>
		status = X_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <flash_write>:
 * @param   *data:   Array of the data that we want to write.
 * @param   *length: Size of the array.
 * @return  status: Report about the success of the writing.
 */
flash_status flash_write(uint32_t address, uint32_t *data, uint32_t length)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	flash_status status = FLASH_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	75fb      	strb	r3, [r7, #23]

	uint32_t ret;
	//  HAL_FLASH_Unlock();
	ret = FLASH_If_Write(address, data, length);
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7fe ff27 	bl	8000558 <FLASH_If_Write>
 800170a:	6138      	str	r0, [r7, #16]
	if (ret == FLASHIF_OK)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <flash_write+0x28>
	{
		status = FLASH_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]
 8001716:	e001      	b.n	800171c <flash_write+0x2c>
	}
	else
	{
		status = FLASH_ERROR_WRITE;
 8001718:	2302      	movs	r3, #2
 800171a:	75fb      	strb	r3, [r7, #23]
	}
	// HAL_FLASH_Lock();
	return status;
 800171c:	7dfb      	ldrb	r3, [r7, #23]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800172c:	f7ff fcc2 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f002 fed5 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff f831 	bl	80007c0 <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800176c:	08004760 	.word	0x08004760
  ldr r2, =_sbss
 8001770:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001774:	20000174 	.word	0x20000174

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f94f 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fb1e 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f967 	bl	8001ab2 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 f92f 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	@ (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	2000000c 	.word	0x2000000c
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2000000c 	.word	0x2000000c
 8001844:	20000170 	.word	0x20000170

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000170 	.word	0x20000170

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000000c 	.word	0x2000000c

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	@ (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	@ (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff3e 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff31 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff feb6 	bl	8001848 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d008      	beq.n	8001afc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e052      	b.n	8001ba2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0216 	bic.w	r2, r2, #22
 8001b0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <HAL_DMA_Abort+0x62>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0208 	bic.w	r2, r2, #8
 8001b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4c:	e013      	b.n	8001b76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4e:	f7ff fe7b 	bl	8001848 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d90c      	bls.n	8001b76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2203      	movs	r2, #3
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e015      	b.n	8001ba2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e4      	bne.n	8001b4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b88:	223f      	movs	r2, #63	@ 0x3f
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2280      	movs	r2, #128	@ 0x80
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e00c      	b.n	8001be2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2205      	movs	r2, #5
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c16:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <HAL_FLASH_Program+0x9c>)
 8001c18:	7e1b      	ldrb	r3, [r3, #24]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_FLASH_Program+0x1a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e03b      	b.n	8001c9a <HAL_FLASH_Program+0x92>
 8001c22:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_FLASH_Program+0x9c>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c2c:	f000 f870 	bl	8001d10 <FLASH_WaitForLastOperation>
 8001c30:	4603      	mov	r3, r0
 8001c32:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d12b      	bne.n	8001c92 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c40:	783b      	ldrb	r3, [r7, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f000 f91b 	bl	8001e80 <FLASH_Program_Byte>
 8001c4a:	e016      	b.n	8001c7a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c52:	883b      	ldrh	r3, [r7, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	68b8      	ldr	r0, [r7, #8]
 8001c58:	f000 f8ee 	bl	8001e38 <FLASH_Program_HalfWord>
 8001c5c:	e00d      	b.n	8001c7a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d105      	bne.n	8001c70 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	68b8      	ldr	r0, [r7, #8]
 8001c6a:	f000 f8c3 	bl	8001df4 <FLASH_Program_Word>
 8001c6e:	e004      	b.n	8001c7a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f000 f88b 	bl	8001d90 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c7a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c7e:	f000 f847 	bl	8001d10 <FLASH_WaitForLastOperation>
 8001c82:	4603      	mov	r3, r0
 8001c84:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_FLASH_Program+0xa0>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_FLASH_Program+0xa0>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <HAL_FLASH_Program+0x9c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	761a      	strb	r2, [r3, #24]

  return status;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_FLASH_Unlock+0x38>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da0b      	bge.n	8001cd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_FLASH_Unlock+0x38>)
 8001cc0:	4a09      	ldr	r2, [pc, #36]	@ (8001ce8 <HAL_FLASH_Unlock+0x3c>)
 8001cc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001cc4:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <HAL_FLASH_Unlock+0x38>)
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <HAL_FLASH_Unlock+0x40>)
 8001cc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_FLASH_Unlock+0x38>)
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da01      	bge.n	8001cd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40023c00 	.word	0x40023c00
 8001ce8:	45670123 	.word	0x45670123
 8001cec:	cdef89ab 	.word	0xcdef89ab

08001cf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_FLASH_Lock+0x1c>)
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <HAL_FLASH_Lock+0x1c>)
 8001cfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001cfe:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <FLASH_WaitForLastOperation+0x78>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d22:	f7ff fd91 	bl	8001848 <HAL_GetTick>
 8001d26:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001d28:	e010      	b.n	8001d4c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d00c      	beq.n	8001d4c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <FLASH_WaitForLastOperation+0x38>
 8001d38:	f7ff fd86 	bl	8001848 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d201      	bcs.n	8001d4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e019      	b.n	8001d80 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <FLASH_WaitForLastOperation+0x7c>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e8      	bne.n	8001d2a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <FLASH_WaitForLastOperation+0x7c>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <FLASH_WaitForLastOperation+0x7c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <FLASH_WaitForLastOperation+0x7c>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d76:	f000 f8a5 	bl	8001ec4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0

}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d9c:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <FLASH_Program_DoubleWord+0x60>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <FLASH_Program_DoubleWord+0x60>)
 8001da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <FLASH_Program_DoubleWord+0x60>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <FLASH_Program_DoubleWord+0x60>)
 8001dae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001db2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <FLASH_Program_DoubleWord+0x60>)
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <FLASH_Program_DoubleWord+0x60>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001dc6:	f3bf 8f6f 	isb	sy
}
 8001dca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	000a      	movs	r2, r1
 8001dda:	2300      	movs	r3, #0
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	3104      	adds	r1, #4
 8001de0:	4613      	mov	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <FLASH_Program_Word+0x40>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <FLASH_Program_Word+0x40>)
 8001e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <FLASH_Program_Word+0x40>)
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <FLASH_Program_Word+0x40>)
 8001e10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e16:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <FLASH_Program_Word+0x40>)
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	4a06      	ldr	r2, [pc, #24]	@ (8001e34 <FLASH_Program_Word+0x40>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	601a      	str	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <FLASH_Program_HalfWord+0x44>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <FLASH_Program_HalfWord+0x44>)
 8001e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <FLASH_Program_HalfWord+0x44>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <FLASH_Program_HalfWord+0x44>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <FLASH_Program_HalfWord+0x44>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <FLASH_Program_HalfWord+0x44>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	801a      	strh	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <FLASH_Program_Byte+0x40>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec0 <FLASH_Program_Byte+0x40>)
 8001e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <FLASH_Program_Byte+0x40>)
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <FLASH_Program_Byte+0x40>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <FLASH_Program_Byte+0x40>)
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	4a06      	ldr	r2, [pc, #24]	@ (8001ec0 <FLASH_Program_Byte+0x40>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	701a      	strb	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001ec8:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f043 0310 	orr.w	r3, r3, #16
 8001edc:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001ede:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ee0:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001efc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001f00:	2220      	movs	r2, #32
 8001f02:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001f04:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001f10:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001f1a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001f1e:	2240      	movs	r2, #64	@ 0x40
 8001f20:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001f38:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001f3c:	2280      	movs	r2, #128	@ 0x80
 8001f3e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <FLASH_SetErrorCode+0xa8>)
 8001f56:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <FLASH_SetErrorCode+0xa4>)
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	60da      	str	r2, [r3, #12]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40023c00 	.word	0x40023c00
 8001f6c:	20000010 	.word	0x20000010

08001f70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f7e:	4b31      	ldr	r3, [pc, #196]	@ (8002044 <HAL_FLASHEx_Erase+0xd4>)
 8001f80:	7e1b      	ldrb	r3, [r3, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_FLASHEx_Erase+0x1a>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e058      	b.n	800203c <HAL_FLASHEx_Erase+0xcc>
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <HAL_FLASHEx_Erase+0xd4>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f94:	f7ff febc 	bl	8001d10 <FLASH_WaitForLastOperation>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d148      	bne.n	8002034 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d115      	bne.n	8001fde <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 f868 	bl	8002094 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fc4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fc8:	f7ff fea2 	bl	8001d10 <FLASH_WaitForLastOperation>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_FLASHEx_Erase+0xd8>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <HAL_FLASHEx_Erase+0xd8>)
 8001fd6:	f023 0304 	bic.w	r3, r3, #4
 8001fda:	6113      	str	r3, [r2, #16]
 8001fdc:	e028      	b.n	8002030 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	e01c      	b.n	8002020 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	4619      	mov	r1, r3
 8001fee:	68b8      	ldr	r0, [r7, #8]
 8001ff0:	f000 f874 	bl	80020dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ff4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ff8:	f7ff fe8a 	bl	8001d10 <FLASH_WaitForLastOperation>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_FLASHEx_Erase+0xd8>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <HAL_FLASHEx_Erase+0xd8>)
 8002006:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 800200a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	601a      	str	r2, [r3, #0]
          break;
 8002018:	e00a      	b.n	8002030 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3301      	adds	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4413      	add	r3, r2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	d3da      	bcc.n	8001fe6 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002030:	f000 f8e8 	bl	8002204 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_FLASHEx_Erase+0xd4>)
 8002036:	2200      	movs	r2, #0
 8002038:	761a      	strb	r2, [r3, #24]

  return status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000010 	.word	0x20000010
 8002048:	40023c00 	.word	0x40023c00

0800204c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	220f      	movs	r2, #15
 8002058:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800205a:	f000 f897 	bl	800218c <FLASH_OB_GetWRP>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002066:	f000 f89d 	bl	80021a4 <FLASH_OB_GetRDP>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002072:	f000 f87b 	bl	800216c <FLASH_OB_GetUser>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800207e:	f000 f8b1 	bl	80021e4 <FLASH_OB_GetBOR>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	615a      	str	r2, [r3, #20]
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <FLASH_MassErase+0x44>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <FLASH_MassErase+0x44>)
 80020a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <FLASH_MassErase+0x44>)
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	4a09      	ldr	r2, [pc, #36]	@ (80020d8 <FLASH_MassErase+0x44>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80020b8:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <FLASH_MassErase+0x44>)
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	4313      	orrs	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <FLASH_MassErase+0x44>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c8:	6113      	str	r3, [r2, #16]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e010      	b.n	800211a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d103      	bne.n	8002106 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e009      	b.n	800211a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d103      	bne.n	8002114 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800210c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e002      	b.n	800211a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002114:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002118:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 8002120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002124:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	490f      	ldr	r1, [pc, #60]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002132:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 8002138:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 800213c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4313      	orrs	r3, r2
 8002148:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <FLASH_Erase_Sector+0x8c>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215a:	6113      	str	r3, [r2, #16]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40023c00 	.word	0x40023c00

0800216c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <FLASH_OB_GetUser+0x1c>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f023 031f 	bic.w	r3, r3, #31
 800217a:	b2db      	uxtb	r3, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00

0800218c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <FLASH_OB_GetWRP+0x14>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40023c16 	.word	0x40023c16

080021a4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80021aa:	23aa      	movs	r3, #170	@ 0xaa
 80021ac:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <FLASH_OB_GetRDP+0x3c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2bcc      	cmp	r3, #204	@ 0xcc
 80021b6:	d102      	bne.n	80021be <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80021b8:	23cc      	movs	r3, #204	@ 0xcc
 80021ba:	71fb      	strb	r3, [r7, #7]
 80021bc:	e009      	b.n	80021d2 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <FLASH_OB_GetRDP+0x3c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2baa      	cmp	r3, #170	@ 0xaa
 80021c6:	d102      	bne.n	80021ce <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80021c8:	23aa      	movs	r3, #170	@ 0xaa
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	e001      	b.n	80021d2 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80021ce:	2355      	movs	r3, #85	@ 0x55
 80021d0:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40023c15 	.word	0x40023c15

080021e4 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <FLASH_OB_GetBOR+0x1c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023c14 	.word	0x40023c14

08002204 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002208:	4b20      	ldr	r3, [pc, #128]	@ (800228c <FLASH_FlushCaches+0x88>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d017      	beq.n	8002244 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002214:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1c      	ldr	r2, [pc, #112]	@ (800228c <FLASH_FlushCaches+0x88>)
 800221a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800221e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a19      	ldr	r2, [pc, #100]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002226:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <FLASH_FlushCaches+0x88>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a16      	ldr	r2, [pc, #88]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002236:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <FLASH_FlushCaches+0x88>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a13      	ldr	r2, [pc, #76]	@ (800228c <FLASH_FlushCaches+0x88>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002242:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800225a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <FLASH_FlushCaches+0x88>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002262:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <FLASH_FlushCaches+0x88>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a07      	ldr	r2, [pc, #28]	@ (800228c <FLASH_FlushCaches+0x88>)
 800226e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002272:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <FLASH_FlushCaches+0x88>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a04      	ldr	r2, [pc, #16]	@ (800228c <FLASH_FlushCaches+0x88>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800227e:	6013      	str	r3, [r2, #0]
  }
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e16b      	b.n	8002584 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 815a 	bne.w	800257e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d017      	beq.n	8002380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d123      	bne.n	80023d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80b4 	beq.w	800257e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b60      	ldr	r3, [pc, #384]	@ (800259c <HAL_GPIO_Init+0x30c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	4a5f      	ldr	r2, [pc, #380]	@ (800259c <HAL_GPIO_Init+0x30c>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002424:	6453      	str	r3, [r2, #68]	@ 0x44
 8002426:	4b5d      	ldr	r3, [pc, #372]	@ (800259c <HAL_GPIO_Init+0x30c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a5b      	ldr	r2, [pc, #364]	@ (80025a0 <HAL_GPIO_Init+0x310>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	@ (80025a4 <HAL_GPIO_Init+0x314>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	@ (80025a8 <HAL_GPIO_Init+0x318>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	@ (80025ac <HAL_GPIO_Init+0x31c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	@ (80025b0 <HAL_GPIO_Init+0x320>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4e      	ldr	r2, [pc, #312]	@ (80025b4 <HAL_GPIO_Init+0x324>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4d      	ldr	r2, [pc, #308]	@ (80025b8 <HAL_GPIO_Init+0x328>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4c      	ldr	r2, [pc, #304]	@ (80025bc <HAL_GPIO_Init+0x32c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4b      	ldr	r2, [pc, #300]	@ (80025c0 <HAL_GPIO_Init+0x330>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x20a>
 8002496:	2307      	movs	r3, #7
 8002498:	e00e      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249a:	2308      	movs	r3, #8
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249e:	2306      	movs	r3, #6
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	@ (80025a0 <HAL_GPIO_Init+0x310>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <HAL_GPIO_Init+0x334>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae90 	bls.w	80022ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021c00 	.word	0x40021c00
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e036      	b.n	800267a <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002614:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800261e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6852      	ldr	r2, [r2, #4]
 8002628:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6892      	ldr	r2, [r2, #8]
 8002632:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002634:	f7ff f908 	bl	8001848 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800263a:	e011      	b.n	8002660 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800263c:	f7ff f904 	bl	8001848 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f641 0201 	movw	r2, #6145	@ 0x1801
 800264a:	4293      	cmp	r3, r2
 800264c:	d908      	bls.n	8002660 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e00c      	b.n	800267a <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e6      	bne.n	800263c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002676:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e267      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d075      	beq.n	800278e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d00c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4b85      	ldr	r3, [pc, #532]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d112      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b82      	ldr	r3, [pc, #520]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4b7e      	ldr	r3, [pc, #504]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d05b      	beq.n	800278c <HAL_RCC_OscConfig+0x108>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d157      	bne.n	800278c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e242      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x74>
 80026ea:	4b76      	ldr	r3, [pc, #472]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a75      	ldr	r2, [pc, #468]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b70      	ldr	r3, [pc, #448]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6f      	ldr	r2, [pc, #444]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6d      	ldr	r3, [pc, #436]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6c      	ldr	r2, [pc, #432]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 800271c:	4b69      	ldr	r3, [pc, #420]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a68      	ldr	r2, [pc, #416]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b66      	ldr	r3, [pc, #408]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff f884 	bl	8001848 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff f880 	bl	8001848 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e207      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5b      	ldr	r3, [pc, #364]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xc0>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff f870 	bl	8001848 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff f86c 	bl	8001848 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1f3      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0xe8>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800279a:	4b4a      	ldr	r3, [pc, #296]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b47      	ldr	r3, [pc, #284]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b44      	ldr	r3, [pc, #272]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b41      	ldr	r3, [pc, #260]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1c7      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4937      	ldr	r1, [pc, #220]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_RCC_OscConfig+0x244>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7ff f825 	bl	8001848 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7ff f821 	bl	8001848 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a8      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2b      	ldr	r3, [pc, #172]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4925      	ldr	r1, [pc, #148]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <HAL_RCC_OscConfig+0x244>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff f804 	bl	8001848 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff f800 	bl	8001848 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e187      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d036      	beq.n	80028dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <HAL_RCC_OscConfig+0x248>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe ffe4 	bl	8001848 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe ffe0 	bl	8001848 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e167      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x200>
 80028a2:	e01b      	b.n	80028dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_RCC_OscConfig+0x248>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe ffcd 	bl	8001848 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e00e      	b.n	80028d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe ffc9 	bl	8001848 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d907      	bls.n	80028d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e150      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b88      	ldr	r3, [pc, #544]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ea      	bne.n	80028b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8097 	beq.w	8002a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b81      	ldr	r3, [pc, #516]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a7c      	ldr	r2, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b7a      	ldr	r3, [pc, #488]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b77      	ldr	r3, [pc, #476]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b74      	ldr	r3, [pc, #464]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a73      	ldr	r2, [pc, #460]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe ff89 	bl	8001848 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe ff85 	bl	8001848 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e10c      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x2ea>
 8002960:	4b64      	ldr	r3, [pc, #400]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	4a63      	ldr	r2, [pc, #396]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	@ 0x70
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x30c>
 8002976:	4b5f      	ldr	r3, [pc, #380]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a5e      	ldr	r2, [pc, #376]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b5c      	ldr	r3, [pc, #368]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a5b      	ldr	r2, [pc, #364]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 8002990:	4b58      	ldr	r3, [pc, #352]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a57      	ldr	r2, [pc, #348]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
 800299c:	4b55      	ldr	r3, [pc, #340]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	4a54      	ldr	r2, [pc, #336]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe ff4a 	bl	8001848 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe ff46 	bl	8001848 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0cb      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	4b49      	ldr	r3, [pc, #292]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCC_OscConfig+0x334>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe ff34 	bl	8001848 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe ff30 	bl	8001848 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0b5      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	4b3e      	ldr	r3, [pc, #248]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ee      	bne.n	80029e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	4a38      	ldr	r2, [pc, #224]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a1 	beq.w	8002b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a22:	4b34      	ldr	r3, [pc, #208]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d05c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d141      	bne.n	8002aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b31      	ldr	r3, [pc, #196]	@ (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe ff04 	bl	8001848 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe ff00 	bl	8001848 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e087      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	491b      	ldr	r1, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fed9 	bl	8001848 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe fed5 	bl	8001848 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e05c      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aac:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x416>
 8002ab8:	e054      	b.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_RCC_OscConfig+0x478>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fec2 	bl	8001848 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe febe 	bl	8001848 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e045      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x444>
 8002ae6:	e03d      	b.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e038      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000
 8002afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_RCC_OscConfig+0x4ec>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d121      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d11a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0cc      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b68      	ldr	r3, [pc, #416]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90c      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b65      	ldr	r3, [pc, #404]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a52      	ldr	r2, [pc, #328]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d044      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d119      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b3f      	ldr	r3, [pc, #252]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b3b      	ldr	r3, [pc, #236]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e067      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b37      	ldr	r3, [pc, #220]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4934      	ldr	r1, [pc, #208]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fdf0 	bl	8001848 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fe fdec 	bl	8001848 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b2b      	ldr	r3, [pc, #172]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d20c      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fd50 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08004738 	.word	0x08004738
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000008 	.word	0x20000008

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d44:	b090      	sub	sp, #64	@ 0x40
 8002d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d58:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d00d      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x40>
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	f200 80a1 	bhi.w	8002eac <HAL_RCC_GetSysClockFreq+0x16c>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d72:	e09b      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b53      	ldr	r3, [pc, #332]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d78:	e09b      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7a:	4b53      	ldr	r3, [pc, #332]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d7e:	e098      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d028      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002da8:	2100      	movs	r1, #0
 8002daa:	4b47      	ldr	r3, [pc, #284]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dac:	fb03 f201 	mul.w	r2, r3, r1
 8002db0:	2300      	movs	r3, #0
 8002db2:	fb00 f303 	mul.w	r3, r0, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	4a43      	ldr	r2, [pc, #268]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dba:	fba0 1202 	umull	r1, r2, r0, r2
 8002dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc6:	4413      	add	r3, r2
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	61fa      	str	r2, [r7, #28]
 8002dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002dda:	f7fd f9f5 	bl	80001c8 <__aeabi_uldivmod>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4613      	mov	r3, r2
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de6:	e053      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	2200      	movs	r2, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	617a      	str	r2, [r7, #20]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dfa:	f04f 0b00 	mov.w	fp, #0
 8002dfe:	4652      	mov	r2, sl
 8002e00:	465b      	mov	r3, fp
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f04f 0100 	mov.w	r1, #0
 8002e0a:	0159      	lsls	r1, r3, #5
 8002e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e10:	0150      	lsls	r0, r2, #5
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	ebb2 080a 	subs.w	r8, r2, sl
 8002e1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e32:	ebb2 0408 	subs.w	r4, r2, r8
 8002e36:	eb63 0509 	sbc.w	r5, r3, r9
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	00eb      	lsls	r3, r5, #3
 8002e44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e48:	00e2      	lsls	r2, r4, #3
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	eb14 030a 	adds.w	r3, r4, sl
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	eb45 030b 	adc.w	r3, r5, fp
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e66:	4629      	mov	r1, r5
 8002e68:	028b      	lsls	r3, r1, #10
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e70:	4621      	mov	r1, r4
 8002e72:	028a      	lsls	r2, r1, #10
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	60fa      	str	r2, [r7, #12]
 8002e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e84:	f7fd f9a0 	bl	80001c8 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ea0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3740      	adds	r7, #64	@ 0x40
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	017d7840 	.word	0x017d7840

08002ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee8:	f7ff fff0 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0a9b      	lsrs	r3, r3, #10
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	@ (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	08004748 	.word	0x08004748

08002f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f10:	f7ff ffdc 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0b5b      	lsrs	r3, r3, #13
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	@ (8002f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	08004748 	.word	0x08004748

08002f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e042      	b.n	8002fcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd ff70 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	@ 0x24
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f001 f847 	bl	800400c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d175      	bne.n	80030e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_UART_Transmit+0x2c>
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e06e      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2221      	movs	r2, #33	@ 0x21
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003012:	f7fe fc19 	bl	8001848 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003048:	e02e      	b.n	80030a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	@ 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fd93 	bl	8003b80 <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e03a      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3302      	adds	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e007      	b.n	800309a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1cb      	bne.n	800304a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2140      	movs	r1, #64	@ 0x40
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fd5f 	bl	8003b80 <UART_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e006      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b08a      	sub	sp, #40	@ 0x28
 80030ee:	af02      	add	r7, sp, #8
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	f040 8081 	bne.w	800320e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_UART_Receive+0x2e>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e079      	b.n	8003210 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2222      	movs	r2, #34	@ 0x22
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003130:	f7fe fb8a 	bl	8001848 <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314a:	d108      	bne.n	800315e <HAL_UART_Receive+0x74>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e003      	b.n	8003166 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003166:	e047      	b.n	80031f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	2120      	movs	r1, #32
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fd04 	bl	8003b80 <UART_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e042      	b.n	8003210 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10c      	bne.n	80031aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319c:	b29a      	uxth	r2, r3
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	3302      	adds	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e01f      	b.n	80031ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b2:	d007      	beq.n	80031c4 <HAL_UART_Receive+0xda>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <HAL_UART_Receive+0xe8>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e008      	b.n	80031e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1b2      	bne.n	8003168 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	d112      	bne.n	8003258 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_Receive_IT+0x26>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e00b      	b.n	800325a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	461a      	mov	r2, r3
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fcef 	bl	8003c32 <UART_Start_Receive_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	e000      	b.n	800325a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b0a0      	sub	sp, #128	@ 0x80
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800327a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800327c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8003280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	330c      	adds	r3, #12
 8003288:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800328a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800328c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003290:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e5      	bne.n	800326a <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3314      	adds	r3, #20
 80032a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80032ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80032be:	657a      	str	r2, [r7, #84]	@ 0x54
 80032c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80032cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e5      	bne.n	800329e <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d119      	bne.n	800330e <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ec:	f023 0310 	bic.w	r3, r3, #16
 80032f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e5      	bne.n	80032da <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003318:	2b80      	cmp	r3, #128	@ 0x80
 800331a:	d136      	bne.n	800338a <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3314      	adds	r3, #20
 8003322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	61fb      	str	r3, [r7, #28]
   return(result);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003332:	673b      	str	r3, [r7, #112]	@ 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800333c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e5      	bne.n	800331c <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	2b00      	cmp	r3, #0
 8003356:	d018      	beq.n	800338a <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335c:	2200      	movs	r2, #0
 800335e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fbb0 	bl	8001aca <HAL_DMA_Abort>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fc3a 	bl	8001bee <HAL_DMA_GetError>
 800337a:	4603      	mov	r3, r0
 800337c:	2b20      	cmp	r3, #32
 800337e:	d104      	bne.n	800338a <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2210      	movs	r2, #16
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e052      	b.n	8003430 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003394:	2b40      	cmp	r3, #64	@ 0x40
 8003396:	d136      	bne.n	8003406 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3314      	adds	r3, #20
 80033b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033b8:	61ba      	str	r2, [r7, #24]
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d018      	beq.n	8003406 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d8:	2200      	movs	r2, #0
 80033da:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe fb72 	bl	8001aca <HAL_DMA_Abort>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe fbfc 	bl	8001bee <HAL_DMA_GetError>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d104      	bne.n	8003406 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2210      	movs	r2, #16
 8003400:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e014      	b.n	8003430 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3780      	adds	r7, #128	@ 0x80
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b09a      	sub	sp, #104	@ 0x68
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003452:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003456:	667b      	str	r3, [r7, #100]	@ 0x64
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003460:	657a      	str	r2, [r7, #84]	@ 0x54
 8003462:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003466:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800346e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e5      	bne.n	8003440 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	663b      	str	r3, [r7, #96]	@ 0x60
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3314      	adds	r3, #20
 8003492:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003494:	643a      	str	r2, [r7, #64]	@ 0x40
 8003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800349a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e5      	bne.n	8003474 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d119      	bne.n	80034e4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	61fb      	str	r3, [r7, #28]
   return(result);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f023 0310 	bic.w	r3, r3, #16
 80034c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e5      	bne.n	80034b0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d13f      	bne.n	8003572 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	60bb      	str	r3, [r7, #8]
   return(result);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003508:	65bb      	str	r3, [r7, #88]	@ 0x58
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3314      	adds	r3, #20
 8003510:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003512:	61ba      	str	r2, [r7, #24]
 8003514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6979      	ldr	r1, [r7, #20]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	613b      	str	r3, [r7, #16]
   return(result);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e5      	bne.n	80034f2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d013      	beq.n	8003556 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003532:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_UART_AbortReceive_IT+0x160>)
 8003534:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fb35 	bl	8001baa <HAL_DMA_Abort_IT>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d022      	beq.n	800358c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003550:	4610      	mov	r0, r2
 8003552:	4798      	blx	r3
 8003554:	e01a      	b.n	800358c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fad4 	bl	8003b18 <HAL_UART_AbortReceiveCpltCallback>
 8003570:	e00c      	b.n	800358c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fac6 	bl	8003b18 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3768      	adds	r7, #104	@ 0x68
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	08003d8f 	.word	0x08003d8f

0800359c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0ba      	sub	sp, #232	@ 0xe8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_UART_IRQHandler+0x66>
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fc47 	bl	8003e8e <UART_Receive_IT>
      return;
 8003600:	e273      	b.n	8003aea <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80de 	beq.w	80037c8 <HAL_UART_IRQHandler+0x22c>
 800360c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80d1 	beq.w	80037c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0xae>
 8003632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xd2>
 8003656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0xf6>
 800367a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d011      	beq.n	80036c2 <HAL_UART_IRQHandler+0x126>
 800369e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	f043 0208 	orr.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 820a 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_UART_IRQHandler+0x14e>
 80036d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fbd2 	bl	8003e8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_UART_IRQHandler+0x17a>
 800370e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04f      	beq.n	80037b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fac5 	bl	8003ca6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	d141      	bne.n	80037ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3314      	adds	r3, #20
 8003752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003756:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800375a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800376e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1d9      	bne.n	800372a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	4a8a      	ldr	r2, [pc, #552]	@ (80039ac <HAL_UART_IRQHandler+0x410>)
 8003784:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fa0d 	bl	8001baa <HAL_DMA_Abort_IT>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037a0:	4610      	mov	r0, r2
 80037a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e00e      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9ac 	bl	8003b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00a      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9a8 	bl	8003b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e006      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9a4 	bl	8003b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037c2:	e18d      	b.n	8003ae0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	bf00      	nop
    return;
 80037c6:	e18b      	b.n	8003ae0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	f040 8167 	bne.w	8003aa0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8160 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8159 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	f040 80ce 	bne.w	80039b0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80a9 	beq.w	800397c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800382e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003832:	429a      	cmp	r2, r3
 8003834:	f080 80a2 	bcs.w	800397c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800383e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800384a:	f000 8088 	beq.w	800395e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800386c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800387a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003886:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1d9      	bne.n	800384e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e1      	bne.n	800389a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003900:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800392c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003940:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003942:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800394e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e3      	bne.n	800391c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe f8b6 	bl	8001aca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800396c:	b29b      	uxth	r3, r3
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	b29b      	uxth	r3, r3
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f8d9 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800397a:	e0b3      	b.n	8003ae4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003980:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003984:	429a      	cmp	r2, r3
 8003986:	f040 80ad 	bne.w	8003ae4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003994:	f040 80a6 	bne.w	8003ae4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8c1 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
      return;
 80039aa:	e09b      	b.n	8003ae4 <HAL_UART_IRQHandler+0x548>
 80039ac:	08003d6d 	.word	0x08003d6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 808e 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80039cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8089 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80039fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e3      	bne.n	80039d6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3314      	adds	r3, #20
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a32:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e3      	bne.n	8003a0e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0310 	bic.w	r3, r3, #16
 8003a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a78:	61fa      	str	r2, [r7, #28]
 8003a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	69b9      	ldr	r1, [r7, #24]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	617b      	str	r3, [r7, #20]
   return(result);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e3      	bne.n	8003a54 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f847 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a9e:	e023      	b.n	8003ae8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x524>
 8003aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f980 	bl	8003dbe <UART_Transmit_IT>
    return;
 8003abe:	e014      	b.n	8003aea <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <HAL_UART_IRQHandler+0x54e>
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f9c0 	bl	8003e5e <UART_EndTransmit_IT>
    return;
 8003ade:	e004      	b.n	8003aea <HAL_UART_IRQHandler+0x54e>
    return;
 8003ae0:	bf00      	nop
 8003ae2:	e002      	b.n	8003aea <HAL_UART_IRQHandler+0x54e>
      return;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_UART_IRQHandler+0x54e>
      return;
 8003ae8:	bf00      	nop
  }
}
 8003aea:	37e8      	adds	r7, #232	@ 0xe8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	2300      	movs	r3, #0
 8003b52:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b2db      	uxtb	r3, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b90:	e03b      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d037      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fd fe55 	bl	8001848 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e03a      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d023      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b80      	cmp	r3, #128	@ 0x80
 8003bc6:	d020      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b40      	cmp	r3, #64	@ 0x40
 8003bcc:	d01d      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d116      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f857 	bl	8003ca6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00f      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d0b4      	beq.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2222      	movs	r2, #34	@ 0x22
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0220 	orr.w	r2, r2, #32
 8003c96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b095      	sub	sp, #84	@ 0x54
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cce:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e5      	bne.n	8003ce2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d119      	bne.n	8003d52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0310 	bic.w	r3, r3, #16
 8003d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d3e:	61ba      	str	r2, [r7, #24]
 8003d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d60:	bf00      	nop
 8003d62:	3754      	adds	r7, #84	@ 0x54
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff febf 	bl	8003b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff feb1 	bl	8003b18 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b21      	cmp	r3, #33	@ 0x21
 8003dd0:	d13e      	bne.n	8003e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dda:	d114      	bne.n	8003e06 <UART_Transmit_IT+0x48>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d110      	bne.n	8003e06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	621a      	str	r2, [r3, #32]
 8003e04:	e008      	b.n	8003e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1c59      	adds	r1, r3, #1
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6211      	str	r1, [r2, #32]
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4619      	mov	r1, r3
 8003e26:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10f      	bne.n	8003e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fe36 	bl	8003af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08c      	sub	sp, #48	@ 0x30
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b22      	cmp	r3, #34	@ 0x22
 8003ea8:	f040 80aa 	bne.w	8004000 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb4:	d115      	bne.n	8003ee2 <UART_Receive_IT+0x54>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d111      	bne.n	8003ee2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ee0:	e024      	b.n	8003f2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef0:	d007      	beq.n	8003f02 <UART_Receive_IT+0x74>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <UART_Receive_IT+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e008      	b.n	8003f22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d15d      	bne.n	8003ffc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0220 	bic.w	r2, r2, #32
 8003f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d135      	bne.n	8003ff2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 0310 	bic.w	r3, r3, #16
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fac:	623a      	str	r2, [r7, #32]
 8003fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	69f9      	ldr	r1, [r7, #28]
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d10a      	bne.n	8003fe4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fd9e 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
 8003ff0:	e002      	b.n	8003ff8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd f8fa 	bl	80011ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e002      	b.n	8004002 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3730      	adds	r7, #48	@ 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b0c0      	sub	sp, #256	@ 0x100
 8004012:	af00      	add	r7, sp, #0
 8004014:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	68d9      	ldr	r1, [r3, #12]
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	ea40 0301 	orr.w	r3, r0, r1
 8004034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004064:	f021 010c 	bic.w	r1, r1, #12
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	6999      	ldr	r1, [r3, #24]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	ea40 0301 	orr.w	r3, r0, r1
 8004092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b8f      	ldr	r3, [pc, #572]	@ (80042d8 <UART_SetConfig+0x2cc>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d005      	beq.n	80040ac <UART_SetConfig+0xa0>
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8d      	ldr	r3, [pc, #564]	@ (80042dc <UART_SetConfig+0x2d0>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d104      	bne.n	80040b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7fe ff2e 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 80040b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040b4:	e003      	b.n	80040be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b6:	f7fe ff15 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80040ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c8:	f040 810c 	bne.w	80042e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	1891      	adds	r1, r2, r2
 80040e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040e6:	415b      	adcs	r3, r3
 80040e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ee:	4621      	mov	r1, r4
 80040f0:	eb12 0801 	adds.w	r8, r2, r1
 80040f4:	4629      	mov	r1, r5
 80040f6:	eb43 0901 	adc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800411c:	462b      	mov	r3, r5
 800411e:	eb49 0303 	adc.w	r3, r9, r3
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004132:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800413a:	460b      	mov	r3, r1
 800413c:	18db      	adds	r3, r3, r3
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004140:	4613      	mov	r3, r2
 8004142:	eb42 0303 	adc.w	r3, r2, r3
 8004146:	657b      	str	r3, [r7, #84]	@ 0x54
 8004148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800414c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004150:	f7fc f83a 	bl	80001c8 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <UART_SetConfig+0x2d4>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	011c      	lsls	r4, r3, #4
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800417c:	415b      	adcs	r3, r3
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004184:	4641      	mov	r1, r8
 8004186:	eb12 0a01 	adds.w	sl, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb43 0b01 	adc.w	fp, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800419c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a4:	4692      	mov	sl, r2
 80041a6:	469b      	mov	fp, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	eb1a 0303 	adds.w	r3, sl, r3
 80041ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b2:	464b      	mov	r3, r9
 80041b4:	eb4b 0303 	adc.w	r3, fp, r3
 80041b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041d0:	460b      	mov	r3, r1
 80041d2:	18db      	adds	r3, r3, r3
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	4613      	mov	r3, r2
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041e6:	f7fb ffef 	bl	80001c8 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80041f2:	fba3 2301 	umull	r2, r3, r3, r1
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2264      	movs	r2, #100	@ 0x64
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	1acb      	subs	r3, r1, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004206:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <UART_SetConfig+0x2d4>)
 8004208:	fba3 2302 	umull	r2, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004214:	441c      	add	r4, r3
 8004216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004220:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004230:	415b      	adcs	r3, r3
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004238:	4641      	mov	r1, r8
 800423a:	1851      	adds	r1, r2, r1
 800423c:	6339      	str	r1, [r7, #48]	@ 0x30
 800423e:	4649      	mov	r1, r9
 8004240:	414b      	adcs	r3, r1
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004250:	4659      	mov	r1, fp
 8004252:	00cb      	lsls	r3, r1, #3
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425a:	4651      	mov	r1, sl
 800425c:	00ca      	lsls	r2, r1, #3
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	4603      	mov	r3, r0
 8004264:	4642      	mov	r2, r8
 8004266:	189b      	adds	r3, r3, r2
 8004268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800426c:	464b      	mov	r3, r9
 800426e:	460a      	mov	r2, r1
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004284:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800429e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042a2:	f7fb ff91 	bl	80001c8 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	@ 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	3332      	adds	r3, #50	@ 0x32
 80042be:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 0207 	and.w	r2, r3, #7
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4422      	add	r2, r4
 80042d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d4:	e106      	b.n	80044e4 <UART_SetConfig+0x4d8>
 80042d6:	bf00      	nop
 80042d8:	40011000 	.word	0x40011000
 80042dc:	40011400 	.word	0x40011400
 80042e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042f6:	4642      	mov	r2, r8
 80042f8:	464b      	mov	r3, r9
 80042fa:	1891      	adds	r1, r2, r2
 80042fc:	6239      	str	r1, [r7, #32]
 80042fe:	415b      	adcs	r3, r3
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004306:	4641      	mov	r1, r8
 8004308:	1854      	adds	r4, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb43 0501 	adc.w	r5, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800432c:	464b      	mov	r3, r9
 800432e:	eb45 0303 	adc.w	r3, r5, r3
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004352:	4629      	mov	r1, r5
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4621      	mov	r1, r4
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004364:	f7fb ff30 	bl	80001c8 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800436e:	fba3 2302 	umull	r2, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	011c      	lsls	r4, r3, #4
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004380:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	61b9      	str	r1, [r7, #24]
 8004390:	415b      	adcs	r3, r3
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6139      	str	r1, [r7, #16]
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043f0:	4649      	mov	r1, r9
 80043f2:	008b      	lsls	r3, r1, #2
 80043f4:	4641      	mov	r1, r8
 80043f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fa:	4641      	mov	r1, r8
 80043fc:	008a      	lsls	r2, r1, #2
 80043fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004402:	f7fb fee1 	bl	80001c8 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4611      	mov	r1, r2
 800440c:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800440e:	fba3 2301 	umull	r2, r3, r3, r1
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	@ 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1acb      	subs	r3, r1, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	@ 0x32
 8004420:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <UART_SetConfig+0x4e4>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800442c:	441c      	add	r4, r3
 800442e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004432:	2200      	movs	r2, #0
 8004434:	673b      	str	r3, [r7, #112]	@ 0x70
 8004436:	677a      	str	r2, [r7, #116]	@ 0x74
 8004438:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	415b      	adcs	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	4641      	mov	r1, r8
 800444e:	1851      	adds	r1, r2, r1
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	4649      	mov	r1, r9
 8004454:	414b      	adcs	r3, r1
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004464:	4659      	mov	r1, fp
 8004466:	00cb      	lsls	r3, r1, #3
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446e:	4651      	mov	r1, sl
 8004470:	00ca      	lsls	r2, r1, #3
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4603      	mov	r3, r0
 8004478:	4642      	mov	r2, r8
 800447a:	189b      	adds	r3, r3, r2
 800447c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447e:	464b      	mov	r3, r9
 8004480:	460a      	mov	r2, r1
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	667a      	str	r2, [r7, #100]	@ 0x64
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044a0:	4649      	mov	r1, r9
 80044a2:	008b      	lsls	r3, r1, #2
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044aa:	4641      	mov	r1, r8
 80044ac:	008a      	lsls	r2, r1, #2
 80044ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044b2:	f7fb fe89 	bl	80001c8 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044bc:	fba3 1302 	umull	r1, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	2164      	movs	r1, #100	@ 0x64
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	3332      	adds	r3, #50	@ 0x32
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4422      	add	r2, r4
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f0:	51eb851f 	.word	0x51eb851f

080044f4 <memset>:
 80044f4:	4402      	add	r2, r0
 80044f6:	4603      	mov	r3, r0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d100      	bne.n	80044fe <memset+0xa>
 80044fc:	4770      	bx	lr
 80044fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004502:	e7f9      	b.n	80044f8 <memset+0x4>

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d0d      	ldr	r5, [pc, #52]	@ (800453c <__libc_init_array+0x38>)
 8004508:	4c0d      	ldr	r4, [pc, #52]	@ (8004540 <__libc_init_array+0x3c>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	2600      	movs	r6, #0
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	4d0b      	ldr	r5, [pc, #44]	@ (8004544 <__libc_init_array+0x40>)
 8004516:	4c0c      	ldr	r4, [pc, #48]	@ (8004548 <__libc_init_array+0x44>)
 8004518:	f000 f818 	bl	800454c <_init>
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	2600      	movs	r6, #0
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	f855 3b04 	ldr.w	r3, [r5], #4
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	f855 3b04 	ldr.w	r3, [r5], #4
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	08004758 	.word	0x08004758
 8004540:	08004758 	.word	0x08004758
 8004544:	08004758 	.word	0x08004758
 8004548:	0800475c 	.word	0x0800475c

0800454c <_init>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr

08004558 <_fini>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr
